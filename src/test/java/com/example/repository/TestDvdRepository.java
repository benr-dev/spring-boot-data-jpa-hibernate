/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.repository;

import com.example.entity.Dvd;
import com.example.repository.DvdRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.Optional;

import static org.hamcrest.MatcherAssert.*;
import static org.hamcrest.CoreMatchers.*;

@DataJpaTest
class TestDvdRepository {

    @Autowired
    private DvdRepository dvdRepository;

    @Test public void when_dvdRepositoryFindAll_then_noErrorAndNoResult() {
        //given

        //when
        Iterable<Dvd> dvds = dvdRepository.findAll();

        //then
        assertThat(dvds, notNullValue());
        assertThat(dvds.iterator().hasNext(), is(false));
    }

    @Test public void when_emptyDvdRepositoryFindByTitle_then_noErrorAndNoResult() {
        //given

        //when
        Optional<Dvd> dvd = dvdRepository.findByTitle("A Few Good Men");

        //then
        assertThat(dvd.isPresent(), equalTo(false));
    }

    @Test public void when_saveDvdToEmptyRepository_then_dvdIsSaved() {
        //given
        Dvd newDvd = new Dvd("A Few Good Men", 234);

        //when
        Dvd savedDvd = dvdRepository.save(newDvd);
        Optional<Dvd> readDvdHolder = dvdRepository.findById(savedDvd.getId());

        //then
        assertThat(savedDvd, notNullValue());
        assertThat(savedDvd.getId(), notNullValue());
        assertThat(savedDvd.getRunningTimeInSeconds(), equalTo(234));
        assertThat(savedDvd.getTitle(), equalTo("A Few Good Men"));

        assertThat(readDvdHolder.isPresent(), equalTo(true));
        assertThat(readDvdHolder.get(), equalTo(savedDvd));
    }

    @Test public void when_updateDvd_then_dvdIsUpdated() {
        //given
        Dvd savedDvd = dvdRepository.save(new Dvd("A Few Good Men", 234));
        long dvdId = savedDvd.getId();

        //when
        savedDvd.setRunningTimeInSeconds(567);
        dvdRepository.save(savedDvd);

        Optional<Dvd> readDvdHolder = dvdRepository.findById(dvdId);

        //then
        assertThat(readDvdHolder.isPresent(), equalTo(true));
        assertThat(readDvdHolder.get(), equalTo(savedDvd));
    }

    @Test public void when_deleteDvd_then_dvdIsDeleted() {
        //given
        Dvd savedDvd = dvdRepository.save(new Dvd("A Few Good Men", 234));
        long dvdId = savedDvd.getId();

        //when
        dvdRepository.delete(savedDvd);
        Optional<Dvd> readDvdHolder = dvdRepository.findById(dvdId);

        //then
        assertThat(readDvdHolder.isPresent(), equalTo(false));
    }

    @Test public void when_deleteDvdById_then_dvdIsDeleted() {
        //given
        Dvd savedDvd = dvdRepository.save(new Dvd("A Few Good Men", 234));
        long dvdId = savedDvd.getId();

        //when
        dvdRepository.deleteById(dvdId);
        Optional<Dvd> readDvdHolder = dvdRepository.findById(dvdId);

        //then
        assertThat(readDvdHolder.isPresent(), equalTo(false));
    }

    @Test public void when_findDvdByTitleForExtantDvd_then_dvdIsReturned() {
        //given
        Dvd savedDvd = dvdRepository.save(new Dvd("A Few Good Men", 234));

        //when
        Optional<Dvd> readDvdHolder = dvdRepository.findByTitle("A Few Good Men");

        //then
        assertThat(readDvdHolder.isPresent(), equalTo(true));
        assertThat(readDvdHolder.get(), equalTo(savedDvd));
    }
}
